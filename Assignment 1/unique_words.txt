//
Function
list
#include
<string.h>
-------------------------
GenericLL
Start
typedef
node
definition
void
*data;
*list;
(*compareFn)(void
*b);
gll;
char
genericLL
dsize,
*,
(*pfunction)(void
g;
*)malloc(sizeof(gll));
g->list
NULL;
cfunction;
return
addNodeGLL(genericLL
*temp
(node
*)malloc(sizeof(node));
temp->data
malloc(g->dsize);
memcpy(temp->data,
d,
temp->next
==
NULL)
g->list;
!=
temp2
temp2->next
d
is
data
addNodeGLLSorted(genericLL
make
order
(g->compareFn(temp->data,
g->list->data)
||
&&
*
@brief
0
found
want
search
compared
@return
printf("Error:
pos
1;
is_found
(temp
pos++;
temp
temp->next;
(is_found
deleteNodeGLL(genericLL
g->list->next;
free(temp);
getNodeDataGLL(genericLL!
i)
memcpy(d,
temp->data,
printGLL(genericLL
g)
*curr
(curr
g->printFn(curr->data);
curr
curr->next;
printf("NULL\n");
Set
genericLL,
whose
index
will
hashing
data,
we
hashArraySize;
*hashArray;
*data);
gset;
createSet(int
(*hfunction)(void
*data),
set
(genericLL
sizeof(genericLL));
<
i++)
type
string*
insertGSet(genericSet
set,
*data)
hash
abs(set->hashFn(data));
arrIdx
printGSet(genericSet
printGLL(set->hashArray[i]);
gSetSize(genericSet
g->hashArray[i]->list;
count++;
string_print(void
*((string
*)aPtr);
printf("%s",
here
b
are
string_compare(void
*aPtr,
*bPtr)
strcmp(a,
b);
https://www.geeksforgeeks.org/string-hashing-using-polynomial-rolling-hash-function/
string_hash(void
*str)
*)str);
strlen(s);
p
31,
7;
long
(hash
(s[i]
1)
m;
HASH_ARR_SIZE
100000;
100;
Get
From
File
filePath
file
from
*getWordsFromFile(const
WORD_ARR_MAX_SIZE);
WORD_ARR_MAX_SIZE;
wordArrIdx
*word
(char
FILE
*in_file
fopen(filePath,
"r");
(in_file
printf("Can't
open
%s
reading.\n",
filePath);
Open
Error");
"%s",
increase
*)malloc(strlen(word)
sizeof(char));
free(word);
length
*wordArr)
size++;
size;
returns
resultant
addWordsInSet(string
*words)
createSet(sizeof(string),
string_print);
insertGSet(set,
&words[idx]);
*)malloc(strlen(s)
"./hello_world.c";
"./question1.c";
*words,
*fout
(fout
error");
words[i]
fprintf(fout,
",
printf("\n");
addWordsInSet(words);
*uniqueWords
saveWordsToFile(uniqueWords,
OUTPUT_FILE_PATH);
uniqueWords[i]
printf("Number
'%s':
%d\n",
wordArrLength(uniqueWords));
Write
to
support
generic
linked
<stdio.h>
<stdlib.h>
Code
struct
of
{
*next;
}
node;
gll
int
dsize;
*a,
(*printFn)(void
*a);
*genericLL;
*string;
createGLL(int
(*cfunction)(void
*),
*a))
makes
and
inserts
g
=
(gll
g->dsize
g->compareFn
g->printFn
pfunction;
g,
*d)
add
in
the
end
g->dsize);
if
(g->list
temp;
else
*temp2
while
(temp2->next
temp2->next;
address
be
inserted
ascending
-1)
(!(((g->compareFn(temp2->data,
temp->data)
g->compareFn(temp2->data,
0)
g->compareFn(temp2->next->data,
1))
/**
give
position
present
(1
indexed)
or
not
@param
where
you
*/
isPresentGLL(genericLL
checks
value
(g
NULL");
exit(-1);
0;
d)
pos;
deletes
g->list)
temp)
i,
output
ith
NULL
printf("->");
End
---------------------------
idea:
an
array
by
gset
(*hashFn)(void
*genericSet;
genericSet
hashArraySize,
*b),
set;
(gset
*)malloc(sizeof(gset));
set->hashArraySize
set->hashArray
*)malloc(hashArraySize
set->hashFn
hfunction;
for
(int
i
set->hashArray[i]
createGLL(dsize,
cfunction,
pfunction);
arrSize
set->hashArraySize;
%
arrSize;
(!isPresentGLL(set->hashArray[arrIdx],
data))
addNodeGLL(set->hashArray[arrIdx],
data);
set)
count
g->hashArraySize;
count;
aPtr
*aPtr)
string
s
s);
a
*)bPtr);
compareResult
(compareResult
-1;
stringSize
const
m
1e9
+
p_pow
stringSize;
-
'a'
p_pow)
(p_pow
p)
hash;
2;
WORD_ARR_MAX_SIZE
WORD_MAX_SIZE
Words
object
path
words
filePath)
*wordArr
malloc(sizeof(string)
wordArr[i]
*)malloc(sizeof(char)
WORD_MAX_SIZE);
perror("File
(fscanf(in_file,
word)
EOF)
(wordArrIdx
WORD_ARR_MAX_SIZE)
printf("Programme
Stopped,
WORD_ARR_MAX_SIZE");
wordArr[wordArrIdx]
strcpy(wordArr[wordArrIdx],
word);
wordArrIdx++;
fclose(in_file);
wordArr;
wordArr
wordArrLength(const
size
all
idx
HASH_ARR_SIZE,
string_hash,
string_compare,
(idx
words[idx]
idx++;
geives
*setToWords(genericSet
*)temp->data);
FILE_PATH
OUTPUT_FILE_PATH
"./unique_words.txt";
saveWordsToFile(string
outputFilePath)
fopen(outputFilePath,
"w");
perror("fopen()
"%s\n",
words[i]);
fclose(fout);
main()
*words
getWordsFromFile(FILE_PATH);
printf("%s
uniqueWordSet
setToWords(uniqueWordSet);
uniqueWords[i]);
FILE_PATH,
wordArrLength(words));
Unique
